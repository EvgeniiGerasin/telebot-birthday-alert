from config.config import Config

import csv
import codecs
from datetime import datetime


class Helper:

    @staticmethod
    def to_format(date):
        """–ü—Ä–∏–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ %d.%m.%Y –∫ —Ç–∏–ø—É datetime

        Args:
            date (str): –¥–∞—Ç–∞ –≤–∏–¥–∞ %d.%m.%Y

        Returns:
            datetime type
        """
        return datetime.strptime(date, "%d.%m.%Y")

    @staticmethod
    def read_from_csv(name_file: str):
        """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª *.csv

        Args:
            name_file (str): –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è

        Returns:
            csv type
        """
        r = list()
        with codecs.open(r"app\db\\" + name_file, encoding='utf-8') as f:
            # –î–∞–Ω–Ω—ã–µ –≤–∏–¥–∞ ['–¥–∞—Ç–∞', '–ò–º—è']
            _rec_birthday = csv.reader(f)
            for i in _rec_birthday:
                r.append(i)
        return r


class DataBase:

    def __init__(self) -> None:

        _date_today = datetime.now().date()
        _date_today = f"{_date_today.day}.{_date_today.month}.{_date_today.year}"
        self._date_today = Helper.to_format(_date_today)
        self._rec_birthday = Helper.read_from_csv(
            Config.NAME_FILE_LIST_BIRTDAY
        )
        self._status_img = ''

    def get_all_birthday(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–∞—Ç–µ –î–† –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.

        Returns:
            (dict): key<name> : value<date>
        """
        birthdays = dict()
        for date, name in self._rec_birthday:
            date_birthday = Helper.to_format(
                date + '.' + str(self._date_today.year)
            )
            self._set_status_birthday(date_birthday=date_birthday)
            birthdays[name] = self._status_img + ' ' + date
        return birthdays

    def get_current_month_birthday(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–∞—Ç–µ –î–† 
        —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ.

        Returns:
            (dict): key<name> : value<date>
        """
        birthdays = dict()
        for date, name in self._rec_birthday:
            date_birthday = Helper.to_format(
                date + '.' + str(self._date_today.year)
            )
            if self._date_today.month == date_birthday.month:
                self._set_status_birthday(date_birthday=date_birthday)
                birthdays[name] = self._status_img + ' ' + date
        return birthdays

    def _set_status_birthday(self, date_birthday):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ —Ä—è–¥–æ–º —Å –¥–∞—Ç–æ–π –î–†

        üü¢ - –ø—Ä–æ—à–ª–æ |
        üü£ - –µ—â–µ –±—É–¥–µ—Ç |
        ‚ö° - –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 3/2/1 –¥–µ–Ω—å |
        üéà - —Å–µ–≥–æ–¥–Ω—è 

        Args:
            date_birthday (datetime): –¥–∞—Ç–∞ –î–† —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        """
        date_difference = str(self._date_today - date_birthday)
        # –µ—Å–ª–∏ –µ—Å—Ç—å day –≤ date_difference
        if 'day' in date_difference:
            # 3 –¥–Ω—è –¥–æ –î–†
            if date_difference[:6] in ('-1 day', '-2 day', '-3 day'):
                self._status_img = '‚ö°'
            # –±–æ–ª—å—à–µ 3 –¥–Ω–µ–π –¥–æ –î–†
            elif '-' in date_difference:
                self._status_img = 'üü£'
            # –î–† —É–∂–µ –±—ã–ª
            else:
                self._status_img = 'üü¢'
        # –ï—Å–ª–∏ –Ω–µ—Ç day –≤ date_difference –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –¥–µ–Ω—å –î–†
        else:
            self._status_img = 'üéà'
